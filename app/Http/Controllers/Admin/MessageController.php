<?php

namespace App\Http\Controllers\Admin;

use Auth;

use App\Admin\BlacklistIP;
use App\Admin\Message;
use App\Admin\MessageStatus;
use App\Admin\Setting;

use Illuminate\Http\Request;
use Session;

use App\Http\Requests;
use App\Http\Controllers\Controller;

class MessageController extends Controller
{
    public function __construct()
    {
    	$this->middleware('auth');
    }

    public function index()
    {
        if(Session::has('back_to'))
            Session::forget('back_to');

    	$all_settings = Setting::getAllSettings();

    	$per_page = isset($all_settings['per_page_admin']) ? $all_settings['per_page_admin'] : 50;

    	$user_email = auth()->user()->email;

    	if($user_email == 'demo@demo.demo'){
    		$messages = factory(\App\Admin\Message::class, 20)->make();
    		Session::flash('msg_error', 'You are logged in as a demo user. This messages generated by faker factory. To see a real messages login as administrator');
    	} else {
			$messages = Message::with(['status', 'blacklisted'])->orderBy('created_at', 'desc')->paginate($per_page);
    	}

		$statuses = MessageStatus::all();

		$page_title = 'Messages';
    	return view('admin.messages', compact('page_title', 'messages', 'statuses'));
    }

    public function viewMessage(Request $request, Message $message)
    {
        if(!Session::has('back_to'))
            Session::put('back_to', $request->server('HTTP_REFERER'));

        $message = Message::with(['status', 'blacklisted'])->find($message->id);

        $statuses = MessageStatus::all();

        $page_title = 'View message';

        return view('admin.message', compact('message', 'page_title', 'statuses', 'dump'));
    }

    public function removeMessage(Message $message)
    {
        if(Message::destroy($message->id)){
            //return response()->json(['status' => 'success', 'message' => 'Message successfully deleted.']);
            Session::flash('msg_success', 'Message was deleted.');
            if(Session::has('back_to')){
                return redirect(Session::get('back_to'));
            } else {
                return back();
            }
        } else {
            return back()->with('msg_error', 'Error occured when deleting message.');
        }
    }

    public function updateStatus(Request $request, Message $message)
    {
    	if($message->update(['status_id' => $request->status_id]))
    		return ['success' => 'Status changed'];
    	else
    		return ['success' => 'Error when trying to change status'];
    }

    public function blacklistAdd($blacklisted)
    {
        if(BlacklistIP::create(['ip' => $blacklisted]))
            return back()->with('msg_success', 'IP ' . $blacklisted . ' successfully added to blacklist.');
        else
            return back()->with('msg_error', 'Error occured when adding IP ' . $blacklisted . ' from blacklist.');
    }

    public function blacklistRemove(BlacklistIP $blacklisted)
    {
    	if(BlacklistIP::where('ip', $blacklisted->ip)->delete())
    		return back()->with('msg_success', 'IP ' . $blacklisted->ip . ' successfully removed from blacklist.');
    	else
    		return back()->with('msg_error', 'Error occured when removing IP ' . $blacklisted->ip . ' from blacklist.');
    }
}
