<?php

namespace App\Http\Controllers\Admin;

use Auth;
use Session;
use App\User;
use App\Admin\Setting;
use Illuminate\Http\Request;
use App\Http\Requests;
use App\Http\Controllers\Controller;

class AdminController extends Controller
{
	//private $all_settings;

    public function __construct()
    {
    	$this->middleware('auth', ['except' => ['about', 'index']]);
    	//$this->all_settings = Setting::getAllSettings();
    }
//Index
//Currently empty
    public function index()
    {
    	return redirect()->action('Admin\AdminController@about');
    }
//About page
    public function about()
    {
    	//get phpinfo
		ob_start();
		    phpinfo();
		    $phpinfo_raw = ob_get_contents();
		ob_end_clean();

		preg_match("/<body[^>]*>(.*?)<\/body>/is", $phpinfo_raw, $matches);
		$phpinfo_table = $matches[1];

		//dd(\Auth::check());

		$page_title = 'About';
    	return view('admin.about', array(	'page_title' => $page_title,
    										'phpinfo' => $phpinfo_table));
    }
//Settings page & settings managment
    public function settings()
    {
		$settings = Setting::all();

		$page_title = 'Settings';
    	return view('admin.settings', array(	'page_title' => $page_title,
    											'settings' => $settings));
    	//return 'controller';
    }

    public function upadateSettings(Request $request)
    {
		//dd($request);
		//$settings = new Setting;

		foreach($request->settings as $id=>$row){
            $this->validate($request, [
                'settings.' . $id . '.setting_name' => 'required|between:3,128|unique:settings,setting_name,'.$id,
                'settings.' . $id . '.setting_type' => 'required|in:string,bool,boolean,int,integer,float|max:32',
                'settings.' . $id . '.setting_value' => 'max:512',
            ]);

            $this->middleware('demouser');

			$settings = Setting::find($id);
			$settings->update($row);
		}

		return back();
    }

    public function addSettings(Request $request)
    {
    	//dd($request->all());
		//$settings = new Setting;
		//$settings->create($request->all());

    	$this->validate($request, [
    		'setting_name' => 'required|between:3,128|unique:settings',
    		'setting_type' => 'required|in:string,bool,boolean,int,integer,float|max:32',
    		'setting_value' => 'max:255',
    	]);

		if(Setting::create($request->all()))
    		Session::flash('msg_success', 'Setting successfully added');

		return back();
    }

    public function removeSettings(Request $request, Setting $setting)
    {
    	if(Auth::check()){
    		$setting->destroy($setting->id);
    		Session::flash('msg_success', 'Setting named "' . $setting->setting_name . '" was removed');
    	}

		return back();
    }
//
//  Users managment
//
    public function userIndex()
    {
        $user_email = auth()->user()->email;

        if($user_email == 'demo@demo.demo'){
            $users = factory(\App\User::class, 20)->make();
            Session::flash('msg_error', 'You are logged in as a demo user. This users generated by faker factory. To see a real users login as administrator');
        } else {
        	$all_settings = Setting::getAllSettings();
            $per_page = isset($all_settings['per_page_admin']) ? $all_settings['per_page_admin'] : 50;

            $users = User::paginate($per_page);
        }

		$page_title = 'Users';
        $user_edit_modal = true;

    	return view('admin.users', compact('page_title', 'user_edit_modal', 'users'));
    }

    public function userDestroy(User $user)
    {
		$user->destroy($user->id);
		Session::flash('msg_success', 'User <strong>' . $user->name . '</strong> was removed');

		return back();
    }

    public function userStore(Request $request)
    {
    	$this->validate($request, [
    		'name' => 'required|min:3|max:128',
    		'email' => 'required|email|unique:users',
    		'password' => 'required|min:8',
    	]);

		if(User::create([
            'name' => $request->name,
            'email' => $request->email,
            'password' => bcrypt($request->password),
        ]))
    	
        Session::flash('msg_success', 'User successfully added');

		return back();
    }

    public function userEdit(User $user)
    {
		return response()->json($user);
    }

    public function userUpdate(Request $request)
    {
    	$this->validate($request, [
    		'name' => 'required|min:3|max:128',
    		'email' => 'required|email|unique:users,email,'.$request->id.',id',
    		'password' => 'required|min:8',
    	]);

    	$time = new \DateTime('NOW');

    	$user = [
            'name' => $request->name,
            'email' => $request->email,
            'password' => bcrypt($request->password),
            'updated_at' => $time->format('Y-m-d H:i:s'),
        ];

		if(User::find($request->id)->update($user))
		{
			unset($user['password']);
    		return ['success' => 'User successfully updated', 'result' => $user];
		}
		else
		{
			unset($user['password']);
    		return ['error' => 'There is an error occured', 'result' => $user];
		}
    }
}
